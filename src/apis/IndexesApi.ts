/* tslint:disable */
/* eslint-disable */
/**
 * Trusted Twin API
 * This documentation describes API endpoints of the Trusted Twin platform.
 *
 * The version of the OpenAPI document: 2.05.02
 * Contact: hello@trustedtwin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateIndexesTable201Response,
    CreateIndexesTable201ResponseFromJSON,
    CreateIndexesTable201ResponseToJSON,
    DeleteIndexesTable200Response,
    DeleteIndexesTable200ResponseFromJSON,
    DeleteIndexesTable200ResponseToJSON,
    ErrorObject,
    ErrorObjectFromJSON,
    ErrorObjectToJSON,
    GetIndexTablesResponse,
    GetIndexTablesResponseFromJSON,
    GetIndexTablesResponseToJSON,
    IndexTableResponse,
    IndexTableResponseFromJSON,
    IndexTableResponseToJSON,
    IndexTableUpdate,
    IndexTableUpdateFromJSON,
    IndexTableUpdateToJSON,
    IndexTables,
    IndexTablesFromJSON,
    IndexTablesToJSON,
    ServicesDatabaseUsersAccess,
    ServicesDatabaseUsersAccessFromJSON,
    ServicesDatabaseUsersAccessToJSON,
    TruncateIndexesTable200Response,
    TruncateIndexesTable200ResponseFromJSON,
    TruncateIndexesTable200ResponseToJSON,
    UpdateIndexesTable200Response,
    UpdateIndexesTable200ResponseFromJSON,
    UpdateIndexesTable200ResponseToJSON,
} from '../models';

export interface IndexesApiCreateIndexesTableRequest {
    indexTables?: IndexTables;
}

export interface IndexesApiDeleteIndexesTableRequest {
    index: string;
}

export interface IndexesApiGetIndexesTableRequest {
    index: string;
}

export interface IndexesApiTruncateIndexesTableRequest {
    index: string;
}

export interface IndexesApiUpdateIndexesAccessRequest {
    servicesDatabaseUsersAccess?: ServicesDatabaseUsersAccess;
}

export interface IndexesApiUpdateIndexesTableRequest {
    index: string;
    indexTableUpdate?: IndexTableUpdate;
}

/**
 * 
 */
export class IndexesApi extends runtime.BaseAPI {

    /**
     * Create Index tables
     */
    async createIndexesTableRaw(requestParameters: IndexesApiCreateIndexesTableRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateIndexesTable201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/account/services/indexes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IndexTablesToJSON(requestParameters.indexTables),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateIndexesTable201ResponseFromJSON(jsonValue));
    }

    /**
     * Create Index tables
     */
    async createIndexesTable(requestParameters: IndexesApiCreateIndexesTableRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateIndexesTable201Response> {
        const response = await this.createIndexesTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Index table
     */
    async deleteIndexesTableRaw(requestParameters: IndexesApiDeleteIndexesTableRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteIndexesTable200Response>> {
        if (requestParameters.index === null || requestParameters.index === undefined) {
            throw new runtime.RequiredError('index','Required parameter requestParameters.index was null or undefined when calling deleteIndexesTable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/account/services/indexes/{index}`.replace(`{${"index"}}`, encodeURIComponent(String(requestParameters.index))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteIndexesTable200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete Index table
     */
    async deleteIndexesTable(requestParameters: IndexesApiDeleteIndexesTableRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteIndexesTable200Response> {
        const response = await this.deleteIndexesTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets details of a given Index table
     */
    async getIndexesTableRaw(requestParameters: IndexesApiGetIndexesTableRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<IndexTableResponse>> {
        if (requestParameters.index === null || requestParameters.index === undefined) {
            throw new runtime.RequiredError('index','Required parameter requestParameters.index was null or undefined when calling getIndexesTable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/account/services/indexes/{index}`.replace(`{${"index"}}`, encodeURIComponent(String(requestParameters.index))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndexTableResponseFromJSON(jsonValue));
    }

    /**
     * Gets details of a given Index table
     */
    async getIndexesTable(requestParameters: IndexesApiGetIndexesTableRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<IndexTableResponse> {
        const response = await this.getIndexesTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets list of existing Index tables + database information
     */
    async getIndexesTablesRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<GetIndexTablesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/account/services/indexes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetIndexTablesResponseFromJSON(jsonValue));
    }

    /**
     * Gets list of existing Index tables + database information
     */
    async getIndexesTables(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<GetIndexTablesResponse> {
        const response = await this.getIndexesTablesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete Index table data
     */
    async truncateIndexesTableRaw(requestParameters: IndexesApiTruncateIndexesTableRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TruncateIndexesTable200Response>> {
        if (requestParameters.index === null || requestParameters.index === undefined) {
            throw new runtime.RequiredError('index','Required parameter requestParameters.index was null or undefined when calling truncateIndexesTable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/account/services/indexes/{index}/data`.replace(`{${"index"}}`, encodeURIComponent(String(requestParameters.index))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TruncateIndexesTable200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete Index table data
     */
    async truncateIndexesTable(requestParameters: IndexesApiTruncateIndexesTableRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TruncateIndexesTable200Response> {
        const response = await this.truncateIndexesTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Index service access
     */
    async updateIndexesAccessRaw(requestParameters: IndexesApiUpdateIndexesAccessRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ServicesDatabaseUsersAccess>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/account/services/indexes`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ServicesDatabaseUsersAccessToJSON(requestParameters.servicesDatabaseUsersAccess),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServicesDatabaseUsersAccessFromJSON(jsonValue));
    }

    /**
     * Update Index service access
     */
    async updateIndexesAccess(requestParameters: IndexesApiUpdateIndexesAccessRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ServicesDatabaseUsersAccess> {
        const response = await this.updateIndexesAccessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Index table
     */
    async updateIndexesTableRaw(requestParameters: IndexesApiUpdateIndexesTableRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateIndexesTable200Response>> {
        if (requestParameters.index === null || requestParameters.index === undefined) {
            throw new runtime.RequiredError('index','Required parameter requestParameters.index was null or undefined when calling updateIndexesTable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/account/services/indexes/{index}`.replace(`{${"index"}}`, encodeURIComponent(String(requestParameters.index))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IndexTableUpdateToJSON(requestParameters.indexTableUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateIndexesTable200ResponseFromJSON(jsonValue));
    }

    /**
     * Update Index table
     */
    async updateIndexesTable(requestParameters: IndexesApiUpdateIndexesTableRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateIndexesTable200Response> {
        const response = await this.updateIndexesTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
