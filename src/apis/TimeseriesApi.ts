/* tslint:disable */
/* eslint-disable */
/**
 * Trusted Twin API
 * TT API Gateway.
 *
 * The version of the OpenAPI document: 2.13.00
 * Contact: hello@trustedtwin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTimeseriesTable200Response,
  DeleteTimeseriesTable200Response,
  ErrorObject,
  GetTimeseriesTablesResponse,
  ServicesDatabaseUsersAccess,
  TimeseriesTableResponse,
  TimeseriesTableUpdate,
  TimeseriesTables,
  TruncateTimeseriesTable200Response,
  UpdateTimeseriesTable200Response,
} from '../models';
import {
    CreateTimeseriesTable200ResponseFromJSON,
    CreateTimeseriesTable200ResponseToJSON,
    DeleteTimeseriesTable200ResponseFromJSON,
    DeleteTimeseriesTable200ResponseToJSON,
    ErrorObjectFromJSON,
    ErrorObjectToJSON,
    GetTimeseriesTablesResponseFromJSON,
    GetTimeseriesTablesResponseToJSON,
    ServicesDatabaseUsersAccessFromJSON,
    ServicesDatabaseUsersAccessToJSON,
    TimeseriesTableResponseFromJSON,
    TimeseriesTableResponseToJSON,
    TimeseriesTableUpdateFromJSON,
    TimeseriesTableUpdateToJSON,
    TimeseriesTablesFromJSON,
    TimeseriesTablesToJSON,
    TruncateTimeseriesTable200ResponseFromJSON,
    TruncateTimeseriesTable200ResponseToJSON,
    UpdateTimeseriesTable200ResponseFromJSON,
    UpdateTimeseriesTable200ResponseToJSON,
} from '../models';

export interface TimeseriesApiCreateTimeseriesTableRequest {
    timeseriesTables?: TimeseriesTables;
}

export interface TimeseriesApiDeleteTimeseriesTableRequest {
    timeseries: string;
}

export interface TimeseriesApiGetTimeseriesTableRequest {
    timeseries: string;
}

export interface TimeseriesApiTruncateTimeseriesTableRequest {
    timeseries: string;
}

export interface TimeseriesApiUpdateTimeseriesAccessRequest {
    servicesDatabaseUsersAccess?: ServicesDatabaseUsersAccess;
}

export interface TimeseriesApiUpdateTimeseriesTableRequest {
    timeseries: string;
    timeseriesTableUpdate?: TimeseriesTableUpdate;
}

/**
 * 
 */
export class TimeseriesApi extends runtime.BaseAPI {

    /**
     * Create Timeseries tables
     */
    async createTimeseriesTableRaw(requestParameters: TimeseriesApiCreateTimeseriesTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTimeseriesTable200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/account/services/timeseries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimeseriesTablesToJSON(requestParameters.timeseriesTables),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTimeseriesTable200ResponseFromJSON(jsonValue));
    }

    /**
     * Create Timeseries tables
     */
    async createTimeseriesTable(requestParameters: TimeseriesApiCreateTimeseriesTableRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTimeseriesTable200Response> {
        const response = await this.createTimeseriesTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Timeseries table
     */
    async deleteTimeseriesTableRaw(requestParameters: TimeseriesApiDeleteTimeseriesTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteTimeseriesTable200Response>> {
        if (requestParameters.timeseries === null || requestParameters.timeseries === undefined) {
            throw new runtime.RequiredError('timeseries','Required parameter requestParameters.timeseries was null or undefined when calling deleteTimeseriesTable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/account/services/timeseries/{timeseries}`.replace(`{${"timeseries"}}`, encodeURIComponent(String(requestParameters.timeseries))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteTimeseriesTable200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete Timeseries table
     */
    async deleteTimeseriesTable(requestParameters: TimeseriesApiDeleteTimeseriesTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteTimeseriesTable200Response> {
        const response = await this.deleteTimeseriesTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets details of a given Timeseries table
     */
    async getTimeseriesTableRaw(requestParameters: TimeseriesApiGetTimeseriesTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeseriesTableResponse>> {
        if (requestParameters.timeseries === null || requestParameters.timeseries === undefined) {
            throw new runtime.RequiredError('timeseries','Required parameter requestParameters.timeseries was null or undefined when calling getTimeseriesTable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/account/services/timeseries/{timeseries}`.replace(`{${"timeseries"}}`, encodeURIComponent(String(requestParameters.timeseries))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeseriesTableResponseFromJSON(jsonValue));
    }

    /**
     * Gets details of a given Timeseries table
     */
    async getTimeseriesTable(requestParameters: TimeseriesApiGetTimeseriesTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeseriesTableResponse> {
        const response = await this.getTimeseriesTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets list of existing Timeseries tables + database information
     */
    async getTimeseriesTablesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTimeseriesTablesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/account/services/timeseries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTimeseriesTablesResponseFromJSON(jsonValue));
    }

    /**
     * Gets list of existing Timeseries tables + database information
     */
    async getTimeseriesTables(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTimeseriesTablesResponse> {
        const response = await this.getTimeseriesTablesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete Timeseries table data
     */
    async truncateTimeseriesTableRaw(requestParameters: TimeseriesApiTruncateTimeseriesTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TruncateTimeseriesTable200Response>> {
        if (requestParameters.timeseries === null || requestParameters.timeseries === undefined) {
            throw new runtime.RequiredError('timeseries','Required parameter requestParameters.timeseries was null or undefined when calling truncateTimeseriesTable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/account/services/timeseries/{timeseries}/data`.replace(`{${"timeseries"}}`, encodeURIComponent(String(requestParameters.timeseries))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TruncateTimeseriesTable200ResponseFromJSON(jsonValue));
    }

    /**
     * Delete Timeseries table data
     */
    async truncateTimeseriesTable(requestParameters: TimeseriesApiTruncateTimeseriesTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TruncateTimeseriesTable200Response> {
        const response = await this.truncateTimeseriesTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Timeseries service access
     */
    async updateTimeseriesAccessRaw(requestParameters: TimeseriesApiUpdateTimeseriesAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServicesDatabaseUsersAccess>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/account/services/timeseries`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ServicesDatabaseUsersAccessToJSON(requestParameters.servicesDatabaseUsersAccess),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServicesDatabaseUsersAccessFromJSON(jsonValue));
    }

    /**
     * Update Timeseries service access
     */
    async updateTimeseriesAccess(requestParameters: TimeseriesApiUpdateTimeseriesAccessRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServicesDatabaseUsersAccess> {
        const response = await this.updateTimeseriesAccessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Timeseries table
     */
    async updateTimeseriesTableRaw(requestParameters: TimeseriesApiUpdateTimeseriesTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateTimeseriesTable200Response>> {
        if (requestParameters.timeseries === null || requestParameters.timeseries === undefined) {
            throw new runtime.RequiredError('timeseries','Required parameter requestParameters.timeseries was null or undefined when calling updateTimeseriesTable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/account/services/timeseries/{timeseries}`.replace(`{${"timeseries"}}`, encodeURIComponent(String(requestParameters.timeseries))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TimeseriesTableUpdateToJSON(requestParameters.timeseriesTableUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateTimeseriesTable200ResponseFromJSON(jsonValue));
    }

    /**
     * Update Timeseries table
     */
    async updateTimeseriesTable(requestParameters: TimeseriesApiUpdateTimeseriesTableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateTimeseriesTable200Response> {
        const response = await this.updateTimeseriesTableRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
