/* tslint:disable */
/* eslint-disable */
/**
 * Trusted Twin API
 * TT API Gateway.
 *
 * The version of the OpenAPI document: 2.13.00
 * Contact: hello@trustedtwin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorObject,
  NewTokenResponse,
  PostNewToken,
  PostRefreshToken,
  RefreshTokenResponse,
} from '../models';
import {
    ErrorObjectFromJSON,
    ErrorObjectToJSON,
    NewTokenResponseFromJSON,
    NewTokenResponseToJSON,
    PostNewTokenFromJSON,
    PostNewTokenToJSON,
    PostRefreshTokenFromJSON,
    PostRefreshTokenToJSON,
    RefreshTokenResponseFromJSON,
    RefreshTokenResponseToJSON,
} from '../models';

export interface TokenApiCreateUserTokenRequest {
    postNewToken?: PostNewToken;
}

export interface TokenApiRefreshUserTokenRequest {
    postRefreshToken: PostRefreshToken;
}

/**
 * 
 */
export class TokenApi extends runtime.BaseAPI {

    /**
     * Create a new user token
     */
    async createUserTokenRaw(requestParameters: TokenApiCreateUserTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewTokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostNewTokenToJSON(requestParameters.postNewToken),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NewTokenResponseFromJSON(jsonValue));
    }

    /**
     * Create a new user token
     */
    async createUserToken(requestParameters: TokenApiCreateUserTokenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewTokenResponse> {
        const response = await this.createUserTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refresh user token
     */
    async refreshUserTokenRaw(requestParameters: TokenApiRefreshUserTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefreshTokenResponse>> {
        if (requestParameters.postRefreshToken === null || requestParameters.postRefreshToken === undefined) {
            throw new runtime.RequiredError('postRefreshToken','Required parameter requestParameters.postRefreshToken was null or undefined when calling refreshUserToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/token/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRefreshTokenToJSON(requestParameters.postRefreshToken),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefreshTokenResponseFromJSON(jsonValue));
    }

    /**
     * Refresh user token
     */
    async refreshUserToken(requestParameters: TokenApiRefreshUserTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefreshTokenResponse> {
        const response = await this.refreshUserTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
