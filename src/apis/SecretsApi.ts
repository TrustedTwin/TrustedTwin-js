/* tslint:disable */
/* eslint-disable */
/**
 * Trusted Twin API
 * TT API Gateway.
 *
 * The version of the OpenAPI document: 2.07.00
 * Contact: hello@trustedtwin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {
  CreateUserSecret,
  CreateUserSecretFromJSON,
  CreateUserSecretToJSON,
  CreateUserSecretPIN,
  CreateUserSecretPINFromJSON,
  CreateUserSecretPINToJSON,
  CreateUserSecretPINResponse,
  CreateUserSecretPINResponseFromJSON,
  CreateUserSecretPINResponseToJSON,
  DeleteUserSecretResponse,
  DeleteUserSecretResponseFromJSON,
  DeleteUserSecretResponseToJSON,
  ErrorObject,
  ErrorObjectFromJSON,
  ErrorObjectToJSON,
  UpdateUserSecret,
  UpdateUserSecretFromJSON,
  UpdateUserSecretToJSON,
  UserSecretResponse,
  UserSecretResponseFromJSON,
  UserSecretResponseToJSON,
} from "../models";

export interface SecretsApiCreateUserSecretRequest {
  account: string;
  pin: string;
  createUserSecretPIN?: CreateUserSecretPIN;
}

export interface SecretsApiCreateUserSecretPinRequest {
  user: string;
  createUserSecret?: CreateUserSecret;
}

export interface SecretsApiDeleteUserSecretRequest {
  user: string;
}

export interface SecretsApiGetUserSecretRequest {
  user: string;
}

export interface SecretsApiUpdateUserSecretRequest {
  user: string;
  updateUserSecret?: UpdateUserSecret;
}

/**
 *
 */
export class SecretsApi extends runtime.BaseAPI {
  /**
   * Create User Secret
   */
  async createUserSecretRaw(
    requestParameters: SecretsApiCreateUserSecretRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<UserSecretResponse>> {
    if (
      requestParameters.account === null ||
      requestParameters.account === undefined
    ) {
      throw new runtime.RequiredError(
        "account",
        "Required parameter requestParameters.account was null or undefined when calling createUserSecret."
      );
    }

    if (requestParameters.pin === null || requestParameters.pin === undefined) {
      throw new runtime.RequiredError(
        "pin",
        "Required parameter requestParameters.pin was null or undefined when calling createUserSecret."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/secrets/{account}/{pin}`
          .replace(
            `{${"account"}}`,
            encodeURIComponent(String(requestParameters.account))
          )
          .replace(
            `{${"pin"}}`,
            encodeURIComponent(String(requestParameters.pin))
          ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateUserSecretPINToJSON(requestParameters.createUserSecretPIN),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserSecretResponseFromJSON(jsonValue)
    );
  }

  /**
   * Create User Secret
   */
  async createUserSecret(
    requestParameters: SecretsApiCreateUserSecretRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<UserSecretResponse> {
    const response = await this.createUserSecretRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Create a User Secret PIN required to create a new User Secret
   */
  async createUserSecretPinRaw(
    requestParameters: SecretsApiCreateUserSecretPinRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<CreateUserSecretPINResponse>> {
    if (
      requestParameters.user === null ||
      requestParameters.user === undefined
    ) {
      throw new runtime.RequiredError(
        "user",
        "Required parameter requestParameters.user was null or undefined when calling createUserSecretPin."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
    }

    const response = await this.request(
      {
        path: `/users/{user}/secrets`.replace(
          `{${"user"}}`,
          encodeURIComponent(String(requestParameters.user))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateUserSecretToJSON(requestParameters.createUserSecret),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CreateUserSecretPINResponseFromJSON(jsonValue)
    );
  }

  /**
   * Create a User Secret PIN required to create a new User Secret
   */
  async createUserSecretPin(
    requestParameters: SecretsApiCreateUserSecretPinRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<CreateUserSecretPINResponse> {
    const response = await this.createUserSecretPinRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Delete User Secret
   */
  async deleteUserSecretRaw(
    requestParameters: SecretsApiDeleteUserSecretRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<DeleteUserSecretResponse>> {
    if (
      requestParameters.user === null ||
      requestParameters.user === undefined
    ) {
      throw new runtime.RequiredError(
        "user",
        "Required parameter requestParameters.user was null or undefined when calling deleteUserSecret."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
    }

    const response = await this.request(
      {
        path: `/users/{user}/secrets`.replace(
          `{${"user"}}`,
          encodeURIComponent(String(requestParameters.user))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      DeleteUserSecretResponseFromJSON(jsonValue)
    );
  }

  /**
   * Delete User Secret
   */
  async deleteUserSecret(
    requestParameters: SecretsApiDeleteUserSecretRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<DeleteUserSecretResponse> {
    const response = await this.deleteUserSecretRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Return User Secret definition
   */
  async getUserSecretRaw(
    requestParameters: SecretsApiGetUserSecretRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<UserSecretResponse>> {
    if (
      requestParameters.user === null ||
      requestParameters.user === undefined
    ) {
      throw new runtime.RequiredError(
        "user",
        "Required parameter requestParameters.user was null or undefined when calling getUserSecret."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
    }

    const response = await this.request(
      {
        path: `/users/{user}/secrets`.replace(
          `{${"user"}}`,
          encodeURIComponent(String(requestParameters.user))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserSecretResponseFromJSON(jsonValue)
    );
  }

  /**
   * Return User Secret definition
   */
  async getUserSecret(
    requestParameters: SecretsApiGetUserSecretRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<UserSecretResponse> {
    const response = await this.getUserSecretRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Update User Secret validity
   */
  async updateUserSecretRaw(
    requestParameters: SecretsApiUpdateUserSecretRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<runtime.ApiResponse<UserSecretResponse>> {
    if (
      requestParameters.user === null ||
      requestParameters.user === undefined
    ) {
      throw new runtime.RequiredError(
        "user",
        "Required parameter requestParameters.user was null or undefined when calling updateUserSecret."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
    }

    const response = await this.request(
      {
        path: `/users/{user}/secrets`.replace(
          `{${"user"}}`,
          encodeURIComponent(String(requestParameters.user))
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: UpdateUserSecretToJSON(requestParameters.updateUserSecret),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserSecretResponseFromJSON(jsonValue)
    );
  }

  /**
   * Update User Secret validity
   */
  async updateUserSecret(
    requestParameters: SecretsApiUpdateUserSecretRequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction
  ): Promise<UserSecretResponse> {
    const response = await this.updateUserSecretRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
