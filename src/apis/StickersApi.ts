/* tslint:disable */
/* eslint-disable */
/**
 * Trusted Twin API
 * TT API Gateway.
 *
 * The version of the OpenAPI document: 2.13.00
 * Contact: hello@trustedtwin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateStickersBody,
    CreateStickersBodyFromJSON,
    CreateStickersBodyToJSON,
    CreateStickersResponse,
    CreateStickersResponseFromJSON,
    CreateStickersResponseToJSON,
    DeletedSticker,
    DeletedStickerFromJSON,
    DeletedStickerToJSON,
    ErrorObject,
    ErrorObjectFromJSON,
    ErrorObjectToJSON,
    Sticker,
    StickerFromJSON,
    StickerToJSON,
    StickersList,
    StickersListFromJSON,
    StickersListToJSON,
    StickersResponse,
    StickersResponseFromJSON,
    StickersResponseToJSON,
} from '../models';

export interface StickersApiGetStickerRequest {
    twin: string;
    color: string;
}

export interface StickersApiGetStickersRequest {
    twin: string;
}

export interface StickersApiListStickersRequest {
    color?: string;
    context?: string;
    ge?: number;
    le?: number;
    limit?: number;
    offset?: number;
}

export interface StickersApiPutStickerRequest {
    twin: string;
    createStickersBody?: CreateStickersBody;
}

export interface StickersApiRemoveStickerRequest {
    twin: string;
    color: string;
}

/**
 * 
 */
export class StickersApi extends runtime.BaseAPI {

    /**
     * Get sticker created by own Account
     */
    async getStickerRaw(requestParameters: StickersApiGetStickerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Sticker>> {
        if (requestParameters.twin === null || requestParameters.twin === undefined) {
            throw new runtime.RequiredError('twin','Required parameter requestParameters.twin was null or undefined when calling getSticker.');
        }

        if (requestParameters.color === null || requestParameters.color === undefined) {
            throw new runtime.RequiredError('color','Required parameter requestParameters.color was null or undefined when calling getSticker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/twins/{twin}/stickers/{color}`.replace(`{${"twin"}}`, encodeURIComponent(String(requestParameters.twin))).replace(`{${"color"}}`, encodeURIComponent(String(requestParameters.color))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StickerFromJSON(jsonValue));
    }

    /**
     * Get sticker created by own Account
     */
    async getSticker(requestParameters: StickersApiGetStickerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Sticker> {
        const response = await this.getStickerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all stickers attached to the given Twin visible for the caller
     */
    async getStickersRaw(requestParameters: StickersApiGetStickersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StickersResponse>> {
        if (requestParameters.twin === null || requestParameters.twin === undefined) {
            throw new runtime.RequiredError('twin','Required parameter requestParameters.twin was null or undefined when calling getStickers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/twins/{twin}/stickers`.replace(`{${"twin"}}`, encodeURIComponent(String(requestParameters.twin))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StickersResponseFromJSON(jsonValue));
    }

    /**
     * Gets all stickers attached to the given Twin visible for the caller
     */
    async getStickers(requestParameters: StickersApiGetStickersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StickersResponse> {
        const response = await this.getStickersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets all stickers visible for the caller
     */
    async listStickersRaw(requestParameters: StickersApiListStickersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StickersList>> {
        const queryParameters: any = {};

        if (requestParameters.color !== undefined) {
            queryParameters['color'] = requestParameters.color;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.ge !== undefined) {
            queryParameters['ge'] = requestParameters.ge;
        }

        if (requestParameters.le !== undefined) {
            queryParameters['le'] = requestParameters.le;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/stickers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StickersListFromJSON(jsonValue));
    }

    /**
     * Gets all stickers visible for the caller
     */
    async listStickers(requestParameters: StickersApiListStickersRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StickersList> {
        const response = await this.listStickersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Puts a sticker on a twin
     */
    async putStickerRaw(requestParameters: StickersApiPutStickerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateStickersResponse>> {
        if (requestParameters.twin === null || requestParameters.twin === undefined) {
            throw new runtime.RequiredError('twin','Required parameter requestParameters.twin was null or undefined when calling putSticker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/twins/{twin}/stickers`.replace(`{${"twin"}}`, encodeURIComponent(String(requestParameters.twin))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStickersBodyToJSON(requestParameters.createStickersBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateStickersResponseFromJSON(jsonValue));
    }

    /**
     * Puts a sticker on a twin
     */
    async putSticker(requestParameters: StickersApiPutStickerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateStickersResponse> {
        const response = await this.putStickerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * deletes a given sticker
     */
    async removeStickerRaw(requestParameters: StickersApiRemoveStickerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeletedSticker>> {
        if (requestParameters.twin === null || requestParameters.twin === undefined) {
            throw new runtime.RequiredError('twin','Required parameter requestParameters.twin was null or undefined when calling removeSticker.');
        }

        if (requestParameters.color === null || requestParameters.color === undefined) {
            throw new runtime.RequiredError('color','Required parameter requestParameters.color was null or undefined when calling removeSticker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/twins/{twin}/stickers/{color}`.replace(`{${"twin"}}`, encodeURIComponent(String(requestParameters.twin))).replace(`{${"color"}}`, encodeURIComponent(String(requestParameters.color))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletedStickerFromJSON(jsonValue));
    }

    /**
     * deletes a given sticker
     */
    async removeSticker(requestParameters: StickersApiRemoveStickerRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeletedSticker> {
        const response = await this.removeStickerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
