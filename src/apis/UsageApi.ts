/* tslint:disable */
/* eslint-disable */
/**
 * Trusted Twin API
 * TT API Gateway.
 *
 * The version of the OpenAPI document: 2.13.00
 * Contact: hello@trustedtwin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorObject,
    ErrorObjectFromJSON,
    ErrorObjectToJSON,
    Usage,
    UsageFromJSON,
    UsageToJSON,
} from '../models';

export interface UsageApiGetUserUsageRequest {
    user: string;
}

/**
 * 
 */
export class UsageApi extends runtime.BaseAPI {

    /**
     * Get usage for Account
     */
    async getAccountUsageRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Usage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/usage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsageFromJSON(jsonValue));
    }

    /**
     * Get usage for Account
     */
    async getAccountUsage(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Usage> {
        const response = await this.getAccountUsageRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get usage for given User
     */
    async getUserUsageRaw(requestParameters: UsageApiGetUserUsageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Usage>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling getUserUsage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // RequestAuthorizer authentication
        }

        const response = await this.request({
            path: `/usage/{user}`.replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsageFromJSON(jsonValue));
    }

    /**
     * Get usage for given User
     */
    async getUserUsage(requestParameters: UsageApiGetUserUsageRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Usage> {
        const response = await this.getUserUsageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
