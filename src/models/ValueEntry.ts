/* tslint:disable */
/* eslint-disable */
/**
 * Trusted Twin API
 * TT API Gateway.
 *
 * The version of the OpenAPI document: 2.13.00
 * Contact: hello@trustedtwin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReferenceEntryTimeseries } from './ReferenceEntryTimeseries';
import {
    ReferenceEntryTimeseriesFromJSON,
    ReferenceEntryTimeseriesFromJSONTyped,
    ReferenceEntryTimeseriesToJSON,
} from './ReferenceEntryTimeseries';

/**
 * Ledger's value key
 * @export
 * @interface ValueEntry
 */
export interface ValueEntry {
    /**
     * value for corresponding Key
     * @type {string}
     * @memberof ValueEntry
     */
    value?: string;
    /**
     * Visibility of the Entry
     * @type {string}
     * @memberof ValueEntry
     */
    visibility?: string;
    /**
     * UTC timestamp denoting when the Entry was created
     * @type {number}
     * @memberof ValueEntry
     */
    readonly entryCreatedTs?: number;
    /**
     * UTC timestamp denoting when the Entry was last updated
     * @type {number}
     * @memberof ValueEntry
     */
    readonly entryUpdatedTs?: number;
    /**
     * UTC timestamp denoting when the Entry's value was last changed
     * @type {number}
     * @memberof ValueEntry
     */
    readonly valueChangedTs?: number;
    /**
     * 
     * @type {string}
     * @memberof ValueEntry
     */
    history?: string;
    /**
     * 
     * @type {ReferenceEntryTimeseries}
     * @memberof ValueEntry
     */
    timeseries?: ReferenceEntryTimeseries;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ValueEntry
     */
    publish?: { [key: string]: string; };
}

/**
 * Check if a given object implements the ValueEntry interface.
 */
export function instanceOfValueEntry(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ValueEntryFromJSON(json: any): ValueEntry {
    return ValueEntryFromJSONTyped(json, false);
}

export function ValueEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValueEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'value': !exists(json, 'value') ? undefined : json['value'],
        'visibility': !exists(json, 'visibility') ? undefined : json['visibility'],
        'entryCreatedTs': !exists(json, 'entry_created_ts') ? undefined : json['entry_created_ts'],
        'entryUpdatedTs': !exists(json, 'entry_updated_ts') ? undefined : json['entry_updated_ts'],
        'valueChangedTs': !exists(json, 'value_changed_ts') ? undefined : json['value_changed_ts'],
        'history': !exists(json, 'history') ? undefined : json['history'],
        'timeseries': !exists(json, 'timeseries') ? undefined : ReferenceEntryTimeseriesFromJSON(json['timeseries']),
        'publish': !exists(json, 'publish') ? undefined : json['publish'],
    };
}

export function ValueEntryToJSON(value?: ValueEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'value': value.value,
        'visibility': value.visibility,
        'history': value.history,
        'timeseries': ReferenceEntryTimeseriesToJSON(value.timeseries),
        'publish': value.publish,
    };
}

